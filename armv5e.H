/******************************************************
 * Architecture Module header file.                   *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef  _ARMV5E_H
#define  _ARMV5E_H

#include "systemc.h"
#include "ac_module.H"
#include "ac_utils.H"
#include "armv5e_parms.H"
#include "armv5e_arch.H"
#include "armv5e_isa.H"
#include "ac_tlm_intr_port.H"
#include "armv5e_intr_handlers.H"
#include "ac_gdb_interface.H"
#include "ac_gdb.H"


class armv5e: public ac_module, public armv5e_arch, public AC_GDB_Interface<armv5e_parms::ac_word> {
private:
  typedef cache_item<armv5e_parms::AC_DEC_FIELD_NUMBER> cache_item_t;
  typedef ac_instr<armv5e_parms::AC_DEC_FIELD_NUMBER> ac_instr_t;
public:

  unsigned bhv_pc;
 

  bool has_delayed_load;
  char* delayed_load_program;

  armv5e_parms::armv5e_isa ISA;
  armv5e_inta_handler inta_hnd;
  ac_tlm_intr_port inta;

  cache_item_t* DEC_CACHE;

  unsigned id;

  bool start_up;
  unsigned* instr_dec;
  ac_instr_t* instr_vec;

  AC_GDB<armv5e_parms::ac_word>* gdbstub;

  //!Behavior execution method.
  void behavior();

 
  SC_HAS_PROCESS( armv5e );

  //!Constructor.
  armv5e( sc_module_name name_ ): ac_module(name_), armv5e_arch(), ISA(*this), inta_hnd(*this), inta("inta", inta_hnd) {

    SC_THREAD( behavior );
    bhv_pc = 0; 
    has_delayed_load = false; 
    start_up=1;
    id = 1;

    gdbstub = new AC_GDB<armv5e_parms::ac_word>(this, armv5e_parms::GDB_PORT_NUM);

  }
  void init_dec_cache() {
    DEC_CACHE = (cache_item_t*) calloc(sizeof(cache_item_t),dec_cache_size);
  }
  /***********
   * GDB Support - user supplied methods
   * For further information, look at ~/src/aclib/ac_gdb/ac_gdb_interface.H
   ***********/

  /* Processor Feature Support */
  bool get_ac_tgt_endian();

  void ac_stop();

  /* Register access */
  int nRegs(void);
  armv5e_parms::ac_word reg_read(int reg);
  void reg_write( int reg, armv5e_parms::ac_word value );
  /* Memory access */
  unsigned char mem_read( unsigned int address );
  void mem_write( unsigned int address, unsigned char byte );
  /* GDB stub access */
  AC_GDB<armv5e_parms::ac_word>* get_gdbstub();

  unsigned get_ac_pc();

  void set_ac_pc( unsigned int value );

  virtual void PrintStat();

  void init(int ac, char* av[]);

  void init();

  void load(char* program);

  void delayed_load(char* program);

  void stop(int status = 0);

  void enable_gdb(int port = 5000);

  virtual ~armv5e() {};

};
#endif  //_ARMV5E_H

