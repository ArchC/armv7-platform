/******************************************************
 * Architecture Module header file.                   *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef  _ARM_H
#define  _ARM_H

#include "systemc.h"
#include "ac_module.H"
#include "ac_utils.H"
#include "arm_parms.H"
#include "arm_arch.H"
#include "arm_isa.H"
#include "arm_decode_unit.H"
#include "ac_tlm_intr_port.H"
#include "arm_intr_handlers.H"
#include "ac_gdb_interface.H"
#include "ac_gdb.H"


class arm: public ac_module, public arm_arch, public AC_GDB_Interface<arm_parms::ac_word> {
public:
  bool has_delayed_load;
  char* delayed_load_program;
  arm_parms::arm_isa ISA;
  arm_inta_handler inta_hnd;
  ac_tlm_intr_port inta;

  unsigned id;
  bool start_up;
  arm_decode_unit *decode_unit;
  AC_GDB<arm_parms::ac_word>* gdbstub;

  //!Behavior execution method.
  void behavior();

  SC_HAS_PROCESS( arm );

  //!Constructor.
  arm( sc_module_name name_ ): ac_module(name_), arm_arch(), ISA(*this), inta_hnd(*this), inta("inta", inta_hnd) {
    SC_THREAD( behavior );
    has_delayed_load = false;
    start_up=1;
    id = 1;
    decode_unit = new arm_decode_unit(this, &ISA);
    gdbstub = new AC_GDB<arm_parms::ac_word>(this, arm_parms::GDB_PORT_NUM);

  }

  /***********
   * GDB Support - user supplied methods
   * For further information, look at ~/src/aclib/ac_gdb/ac_gdb_interface.H
   ***********/

  /* Processor Feature Support */
  bool get_ac_tgt_endian();

  void ac_stop();

  /* Register access */
  int nRegs(void);
  arm_parms::ac_word reg_read(int reg);
  void reg_write( int reg, arm_parms::ac_word value );
  /* Memory access */
  unsigned char mem_read( unsigned int address );
  void mem_write( unsigned int address, unsigned char byte );
  /* GDB stub access */
  AC_GDB<arm_parms::ac_word>* get_gdbstub();
  unsigned get_ac_pc();

  void set_ac_pc( unsigned int value );

  virtual void PrintStat();

  void init(int ac, char* av[]);

  void init();

  void load(char* program);

  void delayed_load(char* program);

  void stop(int status = 0);

  void enable_gdb(int port = 5000);

  virtual ~arm() {};

};
#endif  //_ARM_H

