/******************************************************
 * ArchC Resources header file.                       *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef  ARM_ARCH_H
#define  ARM_ARCH_H

#include  "arm_parms.H"
#include  "ac_arch_dec_if.H"
#include  "ac_storage.H"
#include  "ac_memport.H"
#include  "ac_regbank.H"
#include  "ac_reg.H"
#include  "ac_tlm_port.H"
#include  "ac_tlm_intr_port.H"
 
// AC_GDB template class forward declaration
template <typename ac_word> class AC_GDB;

//!ArchC class for model-specific architectural resources.

class arm_arch : public ac_arch_dec_if<arm_parms::ac_word, arm_parms::ac_Hword> {
public:
 
  //!Program Counter.
  ac_reg<unsigned> ac_pc;

  //!Storage Devices.
  ac_tlm_port MEM_port;
  ac_memport<arm_parms::ac_word, arm_parms::ac_Hword> MEM;
  ac_regbank<31, arm_parms::ac_word, arm_parms::ac_Dword> RB;
  ac_reg<arm_parms::ac_word> R14_irq;
  ac_reg<arm_parms::ac_word> R14_fiq;
  ac_reg<arm_parms::ac_word> R14_svc;
  ac_reg<arm_parms::ac_word> R14_abt;
  ac_reg<arm_parms::ac_word> R14_und;
  ac_reg<arm_parms::ac_word> R13_irq;
  ac_reg<arm_parms::ac_word> R13_svc;
  ac_reg<arm_parms::ac_word> R13_abt;
  ac_reg<arm_parms::ac_word> R13_und;
  ac_reg<arm_parms::ac_word> R13_fiq;
  ac_reg<arm_parms::ac_word> SPSR_irq;
  ac_reg<arm_parms::ac_word> SPSR_fiq;
  ac_reg<arm_parms::ac_word> SPSR_svc;
  ac_reg<arm_parms::ac_word> SPSR_abt;
  ac_reg<arm_parms::ac_word> SPSR_und;
  ac_reg<arm_parms::ac_word> R12_fiq;
  ac_reg<arm_parms::ac_word> R11_fiq;
  ac_reg<arm_parms::ac_word> R10_fiq;
  ac_reg<arm_parms::ac_word> R9_fiq;
  ac_reg<arm_parms::ac_word> R8_fiq;


  //!Constructor.
  explicit arm_arch();

  //!Module initialization method.
  virtual void init(int ac, char* av[]) = 0;

  //!Module finalization method.
  virtual void stop(int status = 0) = 0;

  //!GDB stub access virtual method declaration.
  virtual AC_GDB<arm_parms::ac_word>* get_gdbstub() = 0;

  //!Virtual destructor declaration.
  virtual ~arm_arch() {};

};

#endif  //_ARM_ARCH_H
